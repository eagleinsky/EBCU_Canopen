C166 COMPILER V7.53.0.0, MASTER                                                            09/09/2014 14:34:55 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE MASTER
OBJECT MODULE PLACED IN .\obj\master.obj
COMPILER INVOKED BY: d:\Keil\C166\BIN\C166.EXE CANopen\master.c MODV2 BROWSE INCDIR(.\CANopen\include;.\CANopen\include\
                    -XC164_CANopen;.\CANopen) MODV2 DEBUG PRINT(.\list\master.lst) TABS(2) OBJECT(.\obj\master.obj) 

 stmt lvl     source

    1         
    2         /* File generated by gen_cfile.py. Should not be modified. */
    3         
    4         #include "master.h"
    5         
    6         /**************************************************************************/
    7         /* Declaration of mapped variables                                        */
    8         /**************************************************************************/
    9         UNS8 test[] =   /* Mapped at index 0x2001, subindex 0x01 - 0x10 */
   10           {
   11             0x0,  /* 0 */
   12             0x0,  /* 0 */
   13             0x0,  /* 0 */
   14             0x0,  /* 0 */
   15             0x0,  /* 0 */
   16             0x0,  /* 0 */
   17             0x0,  /* 0 */
   18             0x0,  /* 0 */
   19             0x0,  /* 0 */
   20             0x0,  /* 0 */
   21             0x0,  /* 0 */
   22             0x0,  /* 0 */
   23             0x0,  /* 0 */
   24             0x0,  /* 0 */
   25             0x0,  /* 0 */
   26             0x0 /* 0 */
   27           };
   28         
   29         /**************************************************************************/
   30         /* Declaration of value range types                                       */
   31         /**************************************************************************/
   32         
   33         #define valueRange_EMC 0x9F /* Type for index 0x1003 subindex 0x00 (only set of value 0 is possible) */
   34         UNS32 master_valueRangeTest (UNS8 typeValue, void * value)
   35         {
   36  1        switch (typeValue) {
   37  2          case valueRange_EMC:
   38  2            if (*(UNS8*)value != (UNS8)0) return OD_VALUE_RANGE_EXCEEDED;
   39  2            break;
   40  2        }
   41  1        return 0;
   42  1      }
   43         
   44         /**************************************************************************/
   45         /* The node id                                                            */
   46         /**************************************************************************/
   47         /* node_id default value.*/
   48         UNS8 master_bDeviceNodeId = 0x00;
   49         
   50         /**************************************************************************/
   51         /* Array of message processing information */
   52         
   53         const UNS8 master_iam_a_slave = 0;
   54         
C166 COMPILER V7.53.0.0, MASTER                                                            09/09/2014 14:34:55 PAGE 2   

   55         TIMER_HANDLE master_heartBeatTimers[1];
   56         
   57         /*
   58         $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   59         
   60                                        OBJECT DICTIONARY
   61         
   62         $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   63         */
   64         
   65         /* index 0x1000 :   Device Type. */
   66                             UNS32 master_obj1000 = 0x0; /* 0 */
   67                             subindex master_Index1000[] = 
   68                              {
   69                                { RO, uint32, sizeof (UNS32), (void*)&master_obj1000 }
   70                              };
   71         
   72         /* index 0x1001 :   Error Register. */
   73                             UNS8 master_obj1001 = 0x0;  /* 0 */
   74                             subindex master_Index1001[] = 
   75                              {
   76                                { RO, uint8, sizeof (UNS8), (void*)&master_obj1001 }
   77                              };
   78         
   79         /* index 0x1003 :   Pre-defined Error Field */
   80                             UNS8 master_highestSubIndex_obj1003 = 0; /* number of subindex - 1*/
   81                             UNS32 master_obj1003[] = 
   82                             {
   83                               0x0 /* 0 */
   84                             };
   85                             ODCallback_t master_Index1003_callbacks[] = 
   86                              {
   87                                NULL,
   88                                NULL,
   89                              };
   90                             subindex master_Index1003[] = 
   91                              {
   92                                { RW, valueRange_EMC, sizeof (UNS8), (void*)&master_highestSubIndex_obj1003 },
   93                                { RO, uint32, sizeof (UNS32), (void*)&master_obj1003[0] }
   94                              };
   95         
   96         /* index 0x1005 :   SYNC COB ID */
   97                             UNS32 master_obj1005 = 0x0;   /* 0 */
   98         
   99         /* index 0x1006 :   Communication / Cycle Period */
  100                             UNS32 master_obj1006 = 0x0;   /* 0 */
  101         
  102         /* index 0x100C :   Guard Time */ 
  103                             UNS16 master_obj100C = 0x0;   /* 0 */
  104         
  105         /* index 0x100D :   Life Time Factor */ 
  106                             UNS8 master_obj100D = 0x0;   /* 0 */
  107         
  108         /* index 0x1014 :   Emergency COB ID */
  109                             UNS32 master_obj1014 = 0x80 + 0x00;   /* 128 + NodeID */
  110         
  111         /* index 0x1016 :   Consumer Heartbeat Time */
  112                             UNS8 master_highestSubIndex_obj1016 = 0;
  113                             UNS32 master_obj1016[]={0};
  114         
  115         /* index 0x1017 :   Producer Heartbeat Time */ 
  116                             UNS16 master_obj1017 = 0x0;   /* 0 */
C166 COMPILER V7.53.0.0, MASTER                                                            09/09/2014 14:34:55 PAGE 3   

  117         
  118         /* index 0x1018 :   Identity. */
  119                             UNS8 master_highestSubIndex_obj1018 = 4; /* number of subindex - 1*/
  120                             UNS32 master_obj1018_Vendor_ID = 0x0; /* 0 */
  121                             UNS32 master_obj1018_Product_Code = 0x0;  /* 0 */
  122                             UNS32 master_obj1018_Revision_Number = 0x0; /* 0 */
  123                             UNS32 master_obj1018_Serial_Number = 0x0; /* 0 */
  124                             subindex master_Index1018[] = 
  125                              {
  126                                { RO, uint8, sizeof (UNS8), (void*)&master_highestSubIndex_obj1018 },
  127                                { RO, uint32, sizeof (UNS32), (void*)&master_obj1018_Vendor_ID },
  128                                { RO, uint32, sizeof (UNS32), (void*)&master_obj1018_Product_Code },
  129                                { RO, uint32, sizeof (UNS32), (void*)&master_obj1018_Revision_Number },
  130                                { RO, uint32, sizeof (UNS32), (void*)&master_obj1018_Serial_Number }
  131                              };
  132         
  133         /* index 0x1200 :   Server SDO Parameter. */
  134                             UNS8 master_highestSubIndex_obj1200 = 2; /* number of subindex - 1*/
  135                             UNS32 master_obj1200_COB_ID_Client_to_Server_Receive_SDO = 0x600; /* 1536 */
  136                             UNS32 master_obj1200_COB_ID_Server_to_Client_Transmit_SDO = 0x580;  /* 1408 */
  137                             subindex master_Index1200[] = 
  138                              {
  139                                { RO, uint8, sizeof (UNS8), (void*)&master_highestSubIndex_obj1200 },
  140                                { RO, uint32, sizeof (UNS32), (void*)&master_obj1200_COB_ID_Client_to_Server_Receiv
             -e_SDO },
  141                                { RO, uint32, sizeof (UNS32), (void*)&master_obj1200_COB_ID_Server_to_Client_Transm
             -it_SDO }
  142                              };
  143         
  144         /* index 0x1800 :   Transmit PDO 1 Parameter. */
  145                             UNS8 master_highestSubIndex_obj1800 = 5; /* number of subindex - 1*/
  146                             UNS32 master_obj1800_COB_ID_used_by_PDO = 0x180;  /* 384 */
  147                             UNS8 master_obj1800_Transmission_Type = 0x0;  /* 0 */
  148                             UNS16 master_obj1800_Inhibit_Time = 0x0;  /* 0 */
  149                             UNS8 master_obj1800_Compatibility_Entry = 0x0;  /* 0 */
  150                             UNS16 master_obj1800_Event_Timer = 0x0; /* 0 */
  151                             ODCallback_t master_Index1800_callbacks[] = 
  152                              {
  153                                NULL,
  154                                NULL,
  155                                NULL,
  156                                NULL,
  157                                NULL,
  158                                NULL,
  159                              };
  160                             subindex master_Index1800[] = 
  161                              {
  162                                { RO, uint8, sizeof (UNS8), (void*)&master_highestSubIndex_obj1800 },
  163                                { RW, uint32, sizeof (UNS32), (void*)&master_obj1800_COB_ID_used_by_PDO },
  164                                { RW, uint8, sizeof (UNS8), (void*)&master_obj1800_Transmission_Type },
  165                                { RW, uint16, sizeof (UNS16), (void*)&master_obj1800_Inhibit_Time },
  166                                { RW, uint8, sizeof (UNS8), (void*)&master_obj1800_Compatibility_Entry },
  167                                { RW, uint16, sizeof (UNS16), (void*)&master_obj1800_Event_Timer }
  168                              };
  169         
  170         /* index 0x1A00 :   Transmit PDO 1 Mapping. */
  171                             UNS8 master_highestSubIndex_obj1A00 = 0; /* number of subindex - 1*/
  172                              subindex master_Index1A00[] = 
  173                              {
  174                                { RW, uint8, sizeof (UNS8), (void*)&master_highestSubIndex_obj1A00 }
  175                              };
  176         
C166 COMPILER V7.53.0.0, MASTER                                                            09/09/2014 14:34:55 PAGE 4   

  177         /* index 0x2001 :   Mapped variable test */
  178                             UNS8 master_highestSubIndex_obj2001 = 16; /* number of subindex - 1*/
  179                             subindex master_Index2001[] = 
  180                              {
  181                                { RO, uint8, sizeof (UNS8), (void*)&master_highestSubIndex_obj2001 },
  182                                { RW, uint8, sizeof (UNS8), (void*)&test[0] },
  183                                { RW, uint8, sizeof (UNS8), (void*)&test[1] },
  184                                { RW, uint8, sizeof (UNS8), (void*)&test[2] },
  185                                { RW, uint8, sizeof (UNS8), (void*)&test[3] },
  186                                { RW, uint8, sizeof (UNS8), (void*)&test[4] },
  187                                { RW, uint8, sizeof (UNS8), (void*)&test[5] },
  188                                { RW, uint8, sizeof (UNS8), (void*)&test[6] },
  189                                { RW, uint8, sizeof (UNS8), (void*)&test[7] },
  190                                { RW, uint8, sizeof (UNS8), (void*)&test[8] },
  191                                { RW, uint8, sizeof (UNS8), (void*)&test[9] },
  192                                { RW, uint8, sizeof (UNS8), (void*)&test[10] },
  193                                { RW, uint8, sizeof (UNS8), (void*)&test[11] },
  194                                { RW, uint8, sizeof (UNS8), (void*)&test[12] },
  195                                { RW, uint8, sizeof (UNS8), (void*)&test[13] },
  196                                { RW, uint8, sizeof (UNS8), (void*)&test[14] },
  197                                { RW, uint8, sizeof (UNS8), (void*)&test[15] }
  198                              };
  199         
  200         /**************************************************************************/
  201         /* Declaration of pointed variables                                       */
  202         /**************************************************************************/
  203         
  204         const indextable master_objdict[] = 
  205         {
  206           { (subindex*)master_Index1000,sizeof(master_Index1000)/sizeof(master_Index1000[0]), 0x1000},
  207           { (subindex*)master_Index1001,sizeof(master_Index1001)/sizeof(master_Index1001[0]), 0x1001},
  208           { (subindex*)master_Index1018,sizeof(master_Index1018)/sizeof(master_Index1018[0]), 0x1018},
  209           { (subindex*)master_Index1200,sizeof(master_Index1200)/sizeof(master_Index1200[0]), 0x1200},
  210           { (subindex*)master_Index1800,sizeof(master_Index1800)/sizeof(master_Index1800[0]), 0x1800},
  211           { (subindex*)master_Index1A00,sizeof(master_Index1A00)/sizeof(master_Index1A00[0]), 0x1A00},
  212           { (subindex*)master_Index2001,sizeof(master_Index2001)/sizeof(master_Index2001[0]), 0x2001},
  213         };
  214         
  215         const indextable * master_scanIndexOD (UNS16 wIndex, UNS32 * errorCode, ODCallback_t **callbacks)
  216         {
  217  1        int i;
  218  1        *callbacks = NULL;
  219  1        switch(wIndex){
  220  2          case 0x1000: i = 0;break;
  221  2          case 0x1001: i = 1;break;
  222  2          case 0x1018: i = 2;break;
  223  2          case 0x1200: i = 3;break;
  224  2          case 0x1800: i = 4;*callbacks = master_Index1800_callbacks; break;
  225  2          case 0x1A00: i = 5;break;
  226  2          case 0x2001: i = 6;break;
  227  2          default:
  228  2            *errorCode = OD_NO_SUCH_OBJECT;
  229  2            return NULL;
  230  2        }
  231  1        *errorCode = OD_SUCCESSFUL;
  232  1        return &master_objdict[i];
  233  1      }
  234         
  235         /* 
  236          * To count at which received SYNC a PDO must be sent.
  237          * Even if no pdoTransmit are defined, at least one entry is computed
  238          * for compilations issues.
C166 COMPILER V7.53.0.0, MASTER                                                            09/09/2014 14:34:55 PAGE 5   

  239          */
  240         s_PDO_status master_PDO_status[1] = {s_PDO_status_Initializer};
  241         
  242         const quick_index master_firstIndex = {
  243           3, /* SDO_SVR */
  244           0, /* SDO_CLT */
  245           0, /* PDO_RCV */
  246           0, /* PDO_RCV_MAP */
  247           4, /* PDO_TRS */
  248           5 /* PDO_TRS_MAP */
  249         };
  250         
  251         const quick_index master_lastIndex = {
  252           3, /* SDO_SVR */
  253           0, /* SDO_CLT */
  254           0, /* PDO_RCV */
  255           0, /* PDO_RCV_MAP */
  256           4, /* PDO_TRS */
  257           5 /* PDO_TRS_MAP */
  258         };
  259         
  260         const UNS16 master_ObjdictSize = sizeof(master_objdict)/sizeof(master_objdict[0]); 
  261         
  262         CO_Data master_Data = CANOPEN_NODE_DATA_INITIALIZER(master);
  263         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         150     --------
  NEAR-CONST SIZE  =          69     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =        1022     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =        1200     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
