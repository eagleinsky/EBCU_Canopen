C166 COMPILER V7.53.0.0, NMTSLAVE                                                          09/09/2014 14:34:52 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE NMTSLAVE
OBJECT MODULE PLACED IN .\obj\nmtSlave.obj
COMPILER INVOKED BY: d:\Keil\C166\BIN\C166.EXE CANopen\src\nmtSlave.c MODV2 BROWSE INCDIR(.\CANopen\include;.\CANopen\in
                    -clude\XC164_CANopen;.\CANopen) MODV2 DEBUG PRINT(.\list\nmtSlave.lst) TABS(2) OBJECT(.\obj\nmtSlave.obj) 

 stmt lvl     source

    1         /*
    2           This file is part of CanFestival, a library implementing CanOpen
    3           Stack.
    4         
    5           Copyright (C): Edouard TISSERANT and Francis DUPIN
    6         
    7           See COPYING file for copyrights details.
    8         
    9           This library is free software; you can redistribute it and/or
   10           modify it under the terms of the GNU Lesser General Public
   11           License as published by the Free Software Foundation; either
   12           version 2.1 of the License, or (at your option) any later version.
   13         
   14           This library is distributed in the hope that it will be useful,
   15           but WITHOUT ANY WARRANTY; without even the implied warranty of
   16           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   17           Lesser General Public License for more details.
   18         
   19           You should have received a copy of the GNU Lesser General Public
   20           License along with this library; if not, write to the Free Software
   21           Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
   22           USA
   23         */
   24         /*!
   25         ** @file   nmtSlave.c
   26         ** @author Edouard TISSERANT and Francis DUPIN
   27         ** @date   Tue Jun  5 08:50:53 2007
   28         **
   29         ** @brief
   30         **
   31         **
   32         */
   33         #include "nmtSlave.h"
   34         #include "states.h"
   35         #include "canfestival.h"
   36         #include "sysdep.h"
   37         
   38         /*!
   39         ** put the slave in the state wanted by the master
   40         **
   41         ** @param d
   42         ** @param m
   43         **/
   44         void proceedNMTstateChange(CO_Data* d, Message *m)
   45         {
   46  1        if( d->nodeState == Pre_operational ||
   47  1            d->nodeState == Operational ||
   48  1            d->nodeState == Stopped ) {
   49  2      
   50  2          MSG_WAR(0x3400, "NMT received. for node :  ", (*m).data[1]);
   51  2      
   52  2          /* Check if this NMT-message is for this node */
   53  2          /* byte 1 = 0 : all the nodes are concerned (broadcast) */
   54  2      
C166 COMPILER V7.53.0.0, NMTSLAVE                                                          09/09/2014 14:34:52 PAGE 2   

   55  2          if( ( (*m).data[1] == 0 ) || ( (*m).data[1] == *d->bDeviceNodeId ) ){
   56  3      
   57  3            switch( (*m).data[0]){ /* command specifier (cs) */
   58  4            case NMT_Start_Node:
   59  4              if ( (d->nodeState == Pre_operational) || (d->nodeState == Stopped) )
   60  4                setState(d,Operational);
   61  4              break;
   62  4      
   63  4            case NMT_Stop_Node:
   64  4              if ( d->nodeState == Pre_operational ||
   65  4                   d->nodeState == Operational )
   66  4                setState(d,Stopped);
   67  4              break;
   68  4      
   69  4            case NMT_Enter_PreOperational:
   70  4              if ( d->nodeState == Operational ||
   71  4                   d->nodeState == Stopped )
   72  4                setState(d,Pre_operational);
   73  4              break;
   74  4      
   75  4            case NMT_Reset_Node:
   76  4               if(d->NMT_Slave_Node_Reset_Callback != NULL)
   77  4                  d->NMT_Slave_Node_Reset_Callback(d);
   78  4              setState(d,Initialisation);
   79  4              break;
   80  4      
   81  4            case NMT_Reset_Comunication:
   82  4               {
   83  5               UNS8 currentNodeId = getNodeId(d);
   84  5               
   85  5                  if(d->NMT_Slave_Communications_Reset_Callback != NULL)
   86  5                     d->NMT_Slave_Communications_Reset_Callback(d);
   87  5      #ifdef CO_ENABLE_LSS
                          // LSS changes NodeId here in case lss_transfer.nodeID doesn't 
                          // match current getNodeId()
                          if(currentNodeId!=d->lss_transfer.nodeID)
                             currentNodeId = d->lss_transfer.nodeID;
              #endif
   93  5      
   94  5                  // clear old NodeId to make SetNodeId reinitializing
   95  5                  // SDO, EMCY and other COB Ids
   96  5                  *d->bDeviceNodeId = 0xFF; 
   97  5               
   98  5                  setNodeId(d, currentNodeId);
   99  5               }
  100  4               setState(d,Initialisation);
  101  4               break;
  102  4      
  103  4            }/* end switch */
  104  3      
  105  3          }/* end if( ( (*m).data[1] == 0 ) || ( (*m).data[1] ==
  106  2              bDeviceNodeId ) ) */
  107  2        }
  108  1      }
  109         
  110         
  111         /*!
  112         **
  113         **
  114         ** @param d
  115         **
  116         ** @return
C166 COMPILER V7.53.0.0, NMTSLAVE                                                          09/09/2014 14:34:52 PAGE 3   

  117         **/
  118         UNS8 slaveSendBootUp(CO_Data* d)
  119         {
  120  1        Message m;
  121  1      
  122  1      #ifdef CO_ENABLE_LSS
                if(*d->bDeviceNodeId==0xFF)return 0;
              #endif
  125  1      
  126  1        MSG_WAR(0x3407, "Send a Boot-Up msg ", 0);
  127  1      
  128  1        /* message configuration */
  129  1        {
  130  2          UNS16 tmp = NODE_GUARD << 7 | *d->bDeviceNodeId; 
  131  2          m.cob_id = UNS16_LE(tmp);
  132  2        }
  133  1        m.rtr = NOT_A_REQUEST;
  134  1        m.len = 1;
  135  1        m.data[0] = 0x00;
  136  1      
  137  1        return canSend(d->canHandle,&m);
*** WARNING C140 IN LINE 137 OF CANopen\src\nmtSlave.c: 'canSend' undefined; assuming 'extern int canSend()'
  138  1      }
  139         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         264     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
